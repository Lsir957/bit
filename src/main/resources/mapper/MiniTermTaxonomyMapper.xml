<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itcast.dao.MiniTermTaxonomyMapper">
  <resultMap id="BaseResultMap" type="com.itcast.bean.MiniTermTaxonomy">
    <id column="id" jdbcType="BIGINT" property="id" />
    <id column="count" jdbcType="BIGINT" property="count" />
    <result column="term_id" jdbcType="BIGINT" property="termId" />
    <result column="uuid" jdbcType="VARCHAR" property="uuid" />
    <result column="taxonomy" jdbcType="VARCHAR" property="taxonomy" />
    <result column="pid" jdbcType="BIGINT" property="pid" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.itcast.bean.MiniTermTaxonomy">
    <result column="description" jdbcType="LONGVARCHAR" property="description" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, count, term_id, uuid, taxonomy, pid
  </sql>
  <sql id="Blob_Column_List">
    description
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.itcast.bean.MiniTermTaxonomyExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from mini_term_taxonomy
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.itcast.bean.MiniTermTaxonomyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from mini_term_taxonomy
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="com.itcast.bean.MiniTermTaxonomyKey" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from mini_term_taxonomy
    where id = #{id,jdbcType=BIGINT}
      and count = #{count,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.itcast.bean.MiniTermTaxonomyKey">
    delete from mini_term_taxonomy
    where id = #{id,jdbcType=BIGINT}
      and count = #{count,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.itcast.bean.MiniTermTaxonomyExample">
    delete from mini_term_taxonomy
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.itcast.bean.MiniTermTaxonomy">
    insert into mini_term_taxonomy (id, count, term_id, 
      uuid, taxonomy, pid, 
      description)
    values (#{id,jdbcType=BIGINT}, #{count,jdbcType=BIGINT}, #{termId,jdbcType=BIGINT}, 
      #{uuid,jdbcType=VARCHAR}, #{taxonomy,jdbcType=VARCHAR}, #{pid,jdbcType=BIGINT}, 
      #{description,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.itcast.bean.MiniTermTaxonomy">
    insert into mini_term_taxonomy
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="count != null">
        count,
      </if>
      <if test="termId != null">
        term_id,
      </if>
      <if test="uuid != null">
        uuid,
      </if>
      <if test="taxonomy != null">
        taxonomy,
      </if>
      <if test="pid != null">
        pid,
      </if>
      <if test="description != null">
        description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="count != null">
        #{count,jdbcType=BIGINT},
      </if>
      <if test="termId != null">
        #{termId,jdbcType=BIGINT},
      </if>
      <if test="uuid != null">
        #{uuid,jdbcType=VARCHAR},
      </if>
      <if test="taxonomy != null">
        #{taxonomy,jdbcType=VARCHAR},
      </if>
      <if test="pid != null">
        #{pid,jdbcType=BIGINT},
      </if>
      <if test="description != null">
        #{description,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.itcast.bean.MiniTermTaxonomyExample" resultType="java.lang.Long">
    select count(*) from mini_term_taxonomy
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update mini_term_taxonomy
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.count != null">
        count = #{record.count,jdbcType=BIGINT},
      </if>
      <if test="record.termId != null">
        term_id = #{record.termId,jdbcType=BIGINT},
      </if>
      <if test="record.uuid != null">
        uuid = #{record.uuid,jdbcType=VARCHAR},
      </if>
      <if test="record.taxonomy != null">
        taxonomy = #{record.taxonomy,jdbcType=VARCHAR},
      </if>
      <if test="record.pid != null">
        pid = #{record.pid,jdbcType=BIGINT},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update mini_term_taxonomy
    set id = #{record.id,jdbcType=BIGINT},
      count = #{record.count,jdbcType=BIGINT},
      term_id = #{record.termId,jdbcType=BIGINT},
      uuid = #{record.uuid,jdbcType=VARCHAR},
      taxonomy = #{record.taxonomy,jdbcType=VARCHAR},
      pid = #{record.pid,jdbcType=BIGINT},
      description = #{record.description,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update mini_term_taxonomy
    set id = #{record.id,jdbcType=BIGINT},
      count = #{record.count,jdbcType=BIGINT},
      term_id = #{record.termId,jdbcType=BIGINT},
      uuid = #{record.uuid,jdbcType=VARCHAR},
      taxonomy = #{record.taxonomy,jdbcType=VARCHAR},
      pid = #{record.pid,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.itcast.bean.MiniTermTaxonomy">
    update mini_term_taxonomy
    <set>
      <if test="termId != null">
        term_id = #{termId,jdbcType=BIGINT},
      </if>
      <if test="uuid != null">
        uuid = #{uuid,jdbcType=VARCHAR},
      </if>
      <if test="taxonomy != null">
        taxonomy = #{taxonomy,jdbcType=VARCHAR},
      </if>
      <if test="pid != null">
        pid = #{pid,jdbcType=BIGINT},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
      and count = #{count,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.itcast.bean.MiniTermTaxonomy">
    update mini_term_taxonomy
    set term_id = #{termId,jdbcType=BIGINT},
      uuid = #{uuid,jdbcType=VARCHAR},
      taxonomy = #{taxonomy,jdbcType=VARCHAR},
      pid = #{pid,jdbcType=BIGINT},
      description = #{description,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
      and count = #{count,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.itcast.bean.MiniTermTaxonomy">
    update mini_term_taxonomy
    set term_id = #{termId,jdbcType=BIGINT},
      uuid = #{uuid,jdbcType=VARCHAR},
      taxonomy = #{taxonomy,jdbcType=VARCHAR},
      pid = #{pid,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
      and count = #{count,jdbcType=BIGINT}
  </update>
</mapper>